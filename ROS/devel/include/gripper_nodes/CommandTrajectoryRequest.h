// Generated by gencpp from file gripper_nodes/CommandTrajectoryRequest.msg
// DO NOT EDIT!


#ifndef GRIPPER_NODES_MESSAGE_COMMANDTRAJECTORYREQUEST_H
#define GRIPPER_NODES_MESSAGE_COMMANDTRAJECTORYREQUEST_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace gripper_nodes
{
template <class ContainerAllocator>
struct CommandTrajectoryRequest_
{
  typedef CommandTrajectoryRequest_<ContainerAllocator> Type;

  CommandTrajectoryRequest_()
    : pos()
    , speed(0.0)  {
    }
  CommandTrajectoryRequest_(const ContainerAllocator& _alloc)
    : pos(_alloc)
    , speed(0.0)  {
  (void)_alloc;
    }



   typedef std::vector<double, typename ContainerAllocator::template rebind<double>::other >  _pos_type;
  _pos_type pos;

   typedef double _speed_type;
  _speed_type speed;





  typedef boost::shared_ptr< ::gripper_nodes::CommandTrajectoryRequest_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::gripper_nodes::CommandTrajectoryRequest_<ContainerAllocator> const> ConstPtr;

}; // struct CommandTrajectoryRequest_

typedef ::gripper_nodes::CommandTrajectoryRequest_<std::allocator<void> > CommandTrajectoryRequest;

typedef boost::shared_ptr< ::gripper_nodes::CommandTrajectoryRequest > CommandTrajectoryRequestPtr;
typedef boost::shared_ptr< ::gripper_nodes::CommandTrajectoryRequest const> CommandTrajectoryRequestConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::gripper_nodes::CommandTrajectoryRequest_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::gripper_nodes::CommandTrajectoryRequest_<ContainerAllocator> >::stream(s, "", v);
return s;
}

} // namespace gripper_nodes

namespace ros
{
namespace message_traits
{



// BOOLTRAITS {'IsFixedSize': False, 'IsMessage': True, 'HasHeader': False}
// {}

// !!!!!!!!!!! ['__class__', '__delattr__', '__dict__', '__doc__', '__eq__', '__format__', '__getattribute__', '__hash__', '__init__', '__module__', '__ne__', '__new__', '__reduce__', '__reduce_ex__', '__repr__', '__setattr__', '__sizeof__', '__str__', '__subclasshook__', '__weakref__', '_parsed_fields', 'constants', 'fields', 'full_name', 'has_header', 'header_present', 'names', 'package', 'parsed_fields', 'short_name', 'text', 'types']




template <class ContainerAllocator>
struct IsFixedSize< ::gripper_nodes::CommandTrajectoryRequest_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::gripper_nodes::CommandTrajectoryRequest_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct IsMessage< ::gripper_nodes::CommandTrajectoryRequest_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::gripper_nodes::CommandTrajectoryRequest_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::gripper_nodes::CommandTrajectoryRequest_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::gripper_nodes::CommandTrajectoryRequest_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::gripper_nodes::CommandTrajectoryRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "0b7d86359979bf7cfc9d521b2deb7302";
  }

  static const char* value(const ::gripper_nodes::CommandTrajectoryRequest_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x0b7d86359979bf7cULL;
  static const uint64_t static_value2 = 0xfc9d521b2deb7302ULL;
};

template<class ContainerAllocator>
struct DataType< ::gripper_nodes::CommandTrajectoryRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "gripper_nodes/CommandTrajectoryRequest";
  }

  static const char* value(const ::gripper_nodes::CommandTrajectoryRequest_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::gripper_nodes::CommandTrajectoryRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "float64[] pos\n\
float64 speed\n\
";
  }

  static const char* value(const ::gripper_nodes::CommandTrajectoryRequest_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::gripper_nodes::CommandTrajectoryRequest_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.pos);
      stream.next(m.speed);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct CommandTrajectoryRequest_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::gripper_nodes::CommandTrajectoryRequest_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::gripper_nodes::CommandTrajectoryRequest_<ContainerAllocator>& v)
  {
    s << indent << "pos[]" << std::endl;
    for (size_t i = 0; i < v.pos.size(); ++i)
    {
      s << indent << "  pos[" << i << "]: ";
      Printer<double>::stream(s, indent + "  ", v.pos[i]);
    }
    s << indent << "speed: ";
    Printer<double>::stream(s, indent + "  ", v.speed);
  }
};

} // namespace message_operations
} // namespace ros

#endif // GRIPPER_NODES_MESSAGE_COMMANDTRAJECTORYREQUEST_H
